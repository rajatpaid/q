name: talentsavvy-fe CI and CD
on:
  push:
   branches: [ "develop","feature/*" ]
  pull_request:
   branches: [ "develop","main" ]
env:
  ACR_REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER}}
  IMAGE_NAME: talentsavvy-fe
  IMAGE_TAG: ${{github.run_number}} 
  NAMESPACE: talentsavvy-dev
#   HOST_IP: 4.213.88.66
#   PORT: 22
#   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#   SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
#   Unit_Test_Execution:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#       with:
#           fetch-depth: 0
#     - name: Use Node.js 14.x
#       uses: actions/setup-node@v1
#       with:
#         node-version: 14.x
#     - name: Cache node modules
#       id: cache-npm
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-node-modules
#       with:
#         # npm cache files are stored in `~/.npm` on Linux/macOS
#         path: ~/.npm
#         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#         restore-keys: |
#           ${{ runner.os }}-build-${{ env.cache-name }}-
#           ${{ runner.os }}-build-
#           ${{ runner.os }}-

#     - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
#       name: List the state of node modules
#       continue-on-error: true
#       run: npm list

#     - name: Install npm dependencies
#       run: npm install
#     - name: Execute Unit Test cases
#       run: npm test -- --coverage
#       env:
#         CI: true
#     - name: Upload code coverage for ref branch
#       uses: actions/upload-artifact@v3
#       with:
#         name: code_coverage_report
#         path: ./coverage/lcov.info
#     - name: Debug downloads
#       run: pwd; ls -R
#   Code_Quality_Check:
#     needs: Unit_Test_Execution
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#       with:
#           fetch-depth: 0
#     - name: Download code coverage report from base branch
#       uses: actions/download-artifact@v3
#       with:
#         name: code_coverage_report
#     - name: Debug downloads
#       run: pwd; ls -R
#     - name: Static Code Analysis
#       run: echo "Sonar Execution"
#     - uses: sonarsource/sonarqube-scan-action@master 
#       with:
#            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#            scanner-options: '-X'
#    # - uses: sonarsource/sonarqube-quality-gate-action@master
#    #   timeout-minutes: 5

  Code_Build:
#     needs: Code_Quality_Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      name: List the state of node modules
      continue-on-error: true
      run: npm list

    - name: Install npm dependencies
      run: npm install
    - name: Generate build
      run: npm run build
    # Share artifact inside workflow
    - name: Share artifact inside workflow
      uses: actions/upload-artifact@v1
      with:
        name: react-build
        path: build
  Docker_Build_and_Push:
    needs: Code_Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Get artifact
      uses: actions/download-artifact@v1
      with:
        name: react-build
        path: build
    - name: Debug downloads
      run: pwd; ls -R
    - name: Azure container registry login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - name: Build and push docker image
      uses: docker/build-push-action@v4.0.0
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#   Deploy:
#     needs: Docker_Build_and_Push
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2 
#     - uses: appleboy/scp-action@master
#       name: copy deployment package to bastion server
#       with:
#         host: ${{ env.HOST_IP }}
#         username: azureuser
#         key: ${{ secrets.DEV_BASTION }}
#         port: ${{ env.PORT }}
#         source: "helmcharts/*"
#         target: "~/"
#     - name: executing deployment
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ env.HOST_IP }}
#         username: azureuser
#         key: ${{ secrets.DEV_BASTION }}
#         port: ${{ env.PORT }}
#         script: |
#           cd ~/helmcharts/
#           echo "before copy deployment"
#           ls -l /opt/continuous_deployment/
#           echo "delete existing deployment"
#           sudo rm -rf /opt/continuous_deployment/talentsavvy-fe/
#           echo "copy deployment"
#           sudo mv talentsavvy-fe/ /opt/continuous_deployment/
#           cd /opt/continuous_deployment/
#           ls -l
#           echo "copy deployment done"
#           echo "start the deployment to kubernetes cluster"
#           sudo helm upgrade --install talentsavvy-fe -f talentsavvy-fe/overrides/dev-values.yaml --set image.tag=${{ env.IMAGE_TAG }} ./talentsavvy-fe -n talentsavvy-dev
#           sudo helm ls -n talentsavvy-dev
#           echo "deployment done"
